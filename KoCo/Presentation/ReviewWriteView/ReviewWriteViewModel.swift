//
//  ReviewWriteViewModel.swift
//  KoCo
//
//  Created by ÌïòÏó∞Ï£º on 10/26/24.
//

import Foundation
import Combine
//import UIKit
import SwiftUI
import PhotosUI
import RealmSwift

final class ReviewWriteViewModel : ViewModelType {
    private var myStoreRepository : any RepositoryType & MyStoreType
    
    var cancellables = Set<AnyCancellable>()
    var input = Input()
    @Published var output = Output()
    
    //PhotosUIÏùò PhotosPickerÏóê ÏùòÌï¥ ÏÑ†ÌÉùÎêú ÏÇ¨ÏßÑÎì§
    @Published var selectedPhotos: [PhotosPickerItem] = []
    //Ïù¥ÎØ∏ÏßÄÎ°ú Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌï¥ PhotosPickerItemÏùÑ UIImageÎ°ú Î∞îÍæº Î∞∞Ïó¥
    @Published var selectedImages: [UIImage] = []
    //Îß§Ïû•Î¶¨Î∑∞
    @Published var storeReviewText = ""
    //Ï†úÌíàÎ¶¨Î∑∞
    @Published var productReviewText = ""
    //ÏÑ†ÌÉùÎêú ÌÉúÍ∑∏
    @Published var clickedTags : [Int] = []
    //Î≥ÑÏ†ê
    @Published var starRate : Int = 0

    
    init(myStoreRepository : any RepositoryType & MyStoreType) {
        self.myStoreRepository = myStoreRepository
        
        myStoreRepository.checkFileURL()
        myStoreRepository.checkSchemaVersion()
        
        transform()
    }
    
    func transform() {
        input
            .saveReview
            .sink { [weak self] storeInfo in
                guard let self else{return}
                self.saveReviewToRealm(storeInfo: storeInfo)
            }
            .store(in: &cancellables)
        
        input
            .getReviewForID
            .sink { [weak self] storeID in
                guard let self else{return}
                self.getReviewFromRealm(storeID: storeID)
            }
            .store(in: &cancellables)
        
    }
    
    private func getReviewFromRealm(storeID : String) {
        guard let myStore = myStoreRepository.myStore(for: storeID) else {
            output.errorOccur = .noStore
            print("üö®üö®üö®noStoreüö®üö®üö®")
            return
        }
        
        guard let reviewContent = myStore.reviewContent else {
            output.errorOccur = .noReviewContent
            print("üö®üö®üö®noReviewContentüö®üö®üö®")
            return
        }
        
        //Î¶¨Î∑∞ Ïª®ÌÖêÏ∏† Î∑∞Ïóê ÏÖãÏóÖ
        //Îß§Ïû• Î¶¨Î∑∞
        self.storeReviewText = reviewContent.storeReviewText
        //Ï†úÌíà Î¶¨Î∑∞
        self.productReviewText = reviewContent.productReviewText
        //ÌÉúÍ∑∏
        self.clickedTags =  Array(reviewContent.reviewTags).map{$0.rawValue}
        //Î≥ÑÏ†ê
        self.starRate = reviewContent.starRate
        //ÏÇ¨ÏßÑ Í∏∞Î°ù
        for fileName in reviewContent.photoFileNames {
            let uiImage = ImageSavingManager.loadImageFromDocument(filename: fileName)
            self.selectedImages.append(uiImage ?? UIImage())
        }
        
        
    }
    
    private func saveReviewToRealm(storeInfo : LocationDocument) {
        
        print("latitudeüíïüíïüíï", storeInfo.y)
        print("longitudeüíïüíïüíï", storeInfo.x)
        print("üß° ÌÅ¥Î¶≠Îêú ÌÉúÍ∑∏ --> ", clickedTags)
        
        let currentDate = Date()
        

        //‚úÖ ÌÉúÍ∑∏
        //[string] -> [ReviewTag]
        let reviewTags = clickedTags.map{ReviewTagItem(rawValue:$0) ?? .recommend}
        //array ÌòïÌÉúÏùò ÌÉúÍ∑∏ Î¶¨Ïä§Ìä∏ -> RealmSwift.List ÌòïÌÉú
        let realmListTagIDs : RealmSwift.List<ReviewTagItem> = RealmSwift.List()
        realmListTagIDs.append(objectsIn: reviewTags)
        
        //‚úÖ Ïù¥ÎØ∏ÏßÄ
        var imageFileNames : [String] = []
        //ÌååÏùº Îß§ÎãàÏ†ÄÏóê Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•
        for (offset, image) in selectedImages.enumerated() {
            print("ü•∞ Ïù¥ÎØ∏ÏßÄ Ïù¥Î¶Ñ -> ", "\(storeInfo.id)_\(currentDate)_\(offset)")
            
            //realm Ïóê Ï†ÄÏû•Ìï† ÌååÏùº Ïù¥Î¶Ñ ÎßåÎì§Í∏∞
            let dateString = DateFormatManager.shared.getDateFormatter(format: .yearMonthDay).string(from: currentDate)
            let fileName = "\(storeInfo.id)_\(dateString)_\(offset)"
            imageFileNames.append(fileName)
            
            //ÌååÏùºÎß§ÎãàÏ†ÄÏóê Ïù¥ÎØ∏ÏßÄ ÌïòÎÇòÏî© Ï†ÄÏû•
            ImageSavingManager.saveImageToDocument(image: image, filename: fileName)
        }
        //array ÌòïÌÉúÏùò Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ïù¥Î¶Ñ Î¶¨Ïä§Ìä∏ -> RealmSwift.List ÌòïÌÉú
        let realmListPhotoNames : RealmSwift.List<String> = RealmSwift.List()
        realmListPhotoNames.append(objectsIn: imageFileNames)
        
        print("ü•∞ü•∞imageFileNames -> ", imageFileNames)
        
        //‚úÖ Î¶¨Î∑∞ Ïª®ÌÖêÏ∏†
        let reviewContent = ReviewContent(photoFileNames:realmListPhotoNames, storeReviewText: storeReviewText, productReviewText: productReviewText,reviewTags:realmListTagIDs , starRate: starRate)
        
        myStoreRepository.addReview(storeID: storeInfo.id, reviewContent: reviewContent, storeInfo: storeInfo)
        
        output.saveReviewComplete = true
    }
}


// MARK: - Input & Output
extension ReviewWriteViewModel {
    
    struct Input {
        let saveReview = PassthroughSubject<LocationDocument, Never>()
        let getReviewForID = PassthroughSubject<String, Never>()
    }
    
    struct Output {
        var errorOccur : RepositoryError?
        var saveReviewComplete : Bool = false
    }
}


// MARK: - Action
extension ReviewWriteViewModel{
    enum Action {
        case saveReview(storeInfo : LocationDocument)
        case getReview(storeID : String)
    }
    
    func action (_ action:Action) {
        switch action {
        case .saveReview(let storeInfo):
            input.saveReview.send(storeInfo)
        case .getReview(let storeID):
            input.getReviewForID.send(storeID)
        }
    }
}

